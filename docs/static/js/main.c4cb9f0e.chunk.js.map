{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","Components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,mCAETC,EAHe,gDAGgCC,UACnDH,GAJmB,6BACN,oCADM,SAOHI,MAAMF,GAPH,cAOfG,EAPe,gBASEA,EAAIC,OATN,uBASbC,EATa,EASbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAGpCa,QAAQC,IAAIR,GAjBS,kBAkBdA,GAlBc,4CAAH,sDCEPS,EAAc,SAAC,GAAuB,EAArBN,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCFGS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CAAEqB,KAAM,GAAIe,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAWxC,OARAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CAAEjB,KAAMoB,EAAML,SAAS,MAC/B,UAEJ,CAACtB,IAEGuB,EDT2BM,CAAa7B,GAAjCa,EADyB,EAC/BN,KAAce,EADiB,EACjBA,QAEtB,OACE,qCACE,6BAAKtB,IACJsB,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEUjBmB,EAnBM,WAAM,MAGW5C,mBAAS,CAAC,cAHrB,mBAGlB6C,EAHkB,KAGN9C,EAHM,KAKzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG8C,EAAWtB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCXxBgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c4cb9f0e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [InputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log('Submit hecho');\n\n    if (InputValue.trim().length > 2) {\n      setCategories((cats) => [InputValue, ...cats]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={InputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n  const apiKey = '8oTNKO16X1SHpNf8RvUBkhqUWupgJYN7';\n\n  const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=${apiKey}`;\n\n  const res = await fetch(url);\n\n  const { data } = await res.json();\n\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url,\n  }));\n\n  console.log(gifs);\n  return gifs;\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p>Loading...</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setTimeout(() => {\n        setState({ data: imgs, loading: false });\n      }, 3000);\n    });\n  }, [category]);\n\n  return state; //{ data: [], loading: true }\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nconst GifExpertApp = () => {\n  //   const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n  const [categories, setCategories] = useState(['Overwatch']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './Components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}